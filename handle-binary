#include "main.h"
#include <stdio.h>

/**
 * print_binary - converts unsigned int to binary
 * @args: list of args
 * Return: number of output count
 */
int print_binary(va_list args)
{
	int b = va_arg(args, int);
	int binary[64], bit;
	int ind = 0, i, count = 0;
	int *arr, *comp;

	if (b == 0)
	{
		_putchar('0');
		count++;
	}
	else if (b > 0)
	{
		arr = _convert_binary(b);
		count = _loop_print(arr);
	}
	else
	{
		arr = _convert_binary(b);
		comp = _twosComplement(arr);
		count = _loop_print(comp);
	}
	return (count);
}

/**
  * _twosComplement - Apply two complement for negative sign
  * @binary: complement value
  * @bin: binary value
  * Return: binary compliment
  */
int *_twosComplement(int *binary[])
{
    int count = 0;
    int i;
    int size = _arrlen(binary);

    for ((i = size - 1); i >= 0; i--)
    {
        if ((*binary + i) == 0)
            _putchar(1);
	else
            _putchar(0);
	count++;
	binary /= 10;
    }
    return (count);
}

/**
  * convert_binary - convert decimal unsigned int to binary
  * num: decimal number
  * Reurn: success
  */
int *_convert_binary(int num)
{
	int bit, i = 0;
	int size  = _intlen_recursion(num);;
	int *binary = (int *)malloc(size * sizeof(int));

	while (num > 0)
	{
		bit = b % 2;
		*(binary + i) = bit;
		b /= 2;
		i++;
	}
	return (binary);
}

/**
  * _loop_print - Print iteratively
  * @num: number to print
  * Return: number of character printed
  */
int _loop_print(int *num)
{
	int ind = _intlen_recursion(num);
	int i, count = 0;

	for (i = 0 ; i < ind; i--)
	{
		_putchar((num)[i]);
		count++;
	}
	return (count);
}
